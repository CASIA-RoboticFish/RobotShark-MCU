#include "stm32f4xx.h"
#include "usart.h"
#include "delay.h"
#include "mpu6050.h"
#include "inv_mpu.h"
#include "inv_mpu_dmp_motion_driver.h" 
#include "MyPrintf.h"
#include "reaction_wheel.h"

static void PWM_TIM3Init ( uint32_t arr, uint32_t psc )
{
    GPIO_InitTypeDef GPIO_InitStructure = {0};
    
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure = {0};
    TIM_OCInitTypeDef TIM_OCInitStructure = {0};

    // PWM引脚使用配置
    // TIM4C3 --> PB8
    // TIM4C4 --> PC9
    // 使能GPIOB的时钟
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

    
    
		GPIO_InitStructure.GPIO_Pin = ( GPIO_Pin_0 | GPIO_Pin_1 ); 
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;        // 使用复用功能输出模式
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;  // 100MHz高速引脚
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;      // 使用推挽输出
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;    // 不使用上下拉电阻
    GPIO_Init(GPIOB, &GPIO_InitStructure);

		// 设置为复用功能（指定具体的复用功能）
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_TIM3);    
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_TIM3);

		
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);


    // 设定时基
    TIM_TimeBaseStructure.TIM_Prescaler = psc - 1;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    TIM_TimeBaseStructure.TIM_Period = arr - 1;
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);


    // 设定输出通道（我们使用的是TIM4的C1通道）
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
		//TIM_OCInitStructure.TIM_Pulse = 1000; //这个设置的貌似是初始时候的位置
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
		TIM_OC3Init(TIM3, &TIM_OCInitStructure);
		TIM_OC4Init(TIM3, &TIM_OCInitStructure);

    // 使能输出通道一的重载寄存器

		TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Enable);
		TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);
		
    // 使能TIM4的ARR重载
    TIM_ARRPreloadConfig(TIM3, ENABLE);
    // 使能TIM4，即使得定时器开始工作
    TIM_Cmd(TIM3, ENABLE);

    // 使能TIM4的PWM输出，只有这样才能真正的输出PWM波形
    TIM_CtrlPWMOutputs(TIM3, ENABLE);
}		/* -----  end of function PWM_TIM4Init  ----- */

void petral_init()
{
	PWM_TIM3Init(20000, 84);
	TIM_SetCompare3(TIM3, 1500);
	TIM_SetCompare4(TIM3, 1500);
}

void uart2_init(u32 bound)
{
   //GPIO端口设置
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); //使能GPIOA时钟
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);//使能USART1时钟

    //串口1对应引脚复用映射
    GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2); //GPIOA2复用为USART2
    GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2); //GPIOA3复用为USART2

    //USART1端口配置
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3; //GPIOA2与GPIOA3
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;   //速度50MHz
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
    GPIO_Init(GPIOA,&GPIO_InitStructure); //初始化PA2，PA3

   //USART1 初始化设置
    USART_InitStructure.USART_BaudRate = bound;//波特率设置
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
    USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
    USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; //收发模式
    USART_Init(USART2, &USART_InitStructure); //初始化串口1

    //串口中断
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE); //关闭发送中断
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE); //开启接收中断
		USART_ClearFlag(USART2, USART_FLAG_TC);
		USART_Cmd(USART2, ENABLE);  //使能串口2
    
		//Usart1 NVIC 配置
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;//串口1中断通道
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3; //抢占优先级3
    NVIC_InitStructure.NVIC_IRQChannelSubPriority =2;       //子优先级2
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;         //IRQ通道使能
    NVIC_Init(&NVIC_InitStructure); //根据指定的参数初始化VIC寄存器

}


void uart3_init(u32 bound)
{
   //GPIO端口设置
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE); //使能GPIOC时钟
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3,ENABLE);//使能USART3时钟

    //串口1对应引脚复用映射
    GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3); //GPIOC10复用为USART2
    GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3); //GPIOC11复用为USART2

    //USART1端口配置
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9; //GPIOC10与GPIOC11
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;   //速度50MHz
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
    GPIO_Init(GPIOD,&GPIO_InitStructure); //初始化PC10，PC11

   //USART1 初始化设置
    USART_InitStructure.USART_BaudRate = bound;//波特率设置
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
    USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
    USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; //收发模式
    USART_Init(USART3, &USART_InitStructure); //初始化串口1

    //串口中断
    USART_ITConfig(USART3, USART_IT_TXE, DISABLE); //关闭发送中断
    USART_ITConfig(USART3, USART_IT_RXNE, ENABLE); //开启接收中断
		USART_ClearFlag(USART3, USART_FLAG_TC);
		USART_Cmd(USART3, ENABLE);  //使能串口2
    
		//Usart1 NVIC 配置
    NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;//串口1中断通道
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3; //抢占优先级3
    NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;       //子优先级3
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;         //IRQ通道使能
    NVIC_Init(&NVIC_InitStructure); //根据指定的参数初始化VIC寄存器

}


static void TB6612FNG1_Init()
{
	GPIO_InitTypeDef GPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE); //使能GPIOE的时钟
	
	GPIO_InitStructure.GPIO_Pin = (GPIO_Pin_0 | GPIO_Pin_1 |  GPIO_Pin_2 | GPIO_Pin_3);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//输出
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;  //推挽输出
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;  //上拉输出
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz; //高速GPIO
	GPIO_Init(GPIOE, &GPIO_InitStructure);
	
	GPIO_ResetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3);

	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE); //使能GPIOD的时钟
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//输出
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;  //推挽输出
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;  //上拉输出
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz; //高速GPIO
	GPIO_Init(GPIOD, &GPIO_InitStructure);
	
	GPIO_ResetBits(GPIOD, GPIO_Pin_0);
	
	

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure = {0};
	TIM_OCInitTypeDef TIM_OCInitStructure = {0};

	// 使能GPIOC的时钟
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStructure.GPIO_Pin = (GPIO_Pin_4 | GPIO_Pin_5);           // 引脚7和引脚6
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;        // 使用复用功能输出模式
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;  // 100MHz高速引脚
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;      // 使用推挽输出
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;    // 不使用上下拉电阻
	GPIO_Init(GPIOB, &GPIO_InitStructure);    

	// 设置为复用功能（指定具体的复用功能）
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_TIM3);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_TIM3);


	// 使能TIM3时钟
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

	// TIM3的时钟频率是84MHz
// 设定时基
	TIM_TimeBaseStructure.TIM_Prescaler = 84 - 1;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseStructure.TIM_Period = 1000 - 1;
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

	// 初始化输出通道
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OC2Init(TIM3, &TIM_OCInitStructure);
	TIM_OC1Init(TIM3, &TIM_OCInitStructure);

	// 使能输出通道重载
	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
	// 使能重载寄存器
	TIM_ARRPreloadConfig(TIM3, ENABLE);
	// 使能定时器（定时器开始计数）
	TIM_Cmd(TIM3, ENABLE);

	// 使能PWM输出
	TIM_CtrlPWMOutputs(TIM3, ENABLE);
}	



// L9110S
static void PWM_TIM1Init ( uint32_t arr, uint32_t psc )
{
    GPIO_InitTypeDef GPIO_InitStructure = {0}; 

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure = {0};
    TIM_OCInitTypeDef TIM_OCInitStructure = {0};

    // 使能GPIOC的时钟
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

    GPIO_InitStructure.GPIO_Pin = (GPIO_Pin_10 | GPIO_Pin_11 );           // 引脚7和引脚6
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;        // 使用复用功能输出模式
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;  // 100MHz高速引脚
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;      // 使用推挽输出
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;    // 不使用上下拉电阻
    GPIO_Init(GPIOA, &GPIO_InitStructure);    

    // 设置为复用功能（指定具体的复用功能）
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_TIM1);
	  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_TIM1);


    // 使能TIM3时钟
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

    // TIM3的时钟频率是84MHz
	// 设定时基
    TIM_TimeBaseStructure.TIM_Prescaler = psc - 1;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseStructure.TIM_Period = arr - 1;
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

    // 初始化输出通道
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
		TIM_OC4Init(TIM1, &TIM_OCInitStructure);
		TIM_OC3Init(TIM1, &TIM_OCInitStructure);
		

    // 使能输出通道重载
		TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
		TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);

    // 使能重载寄存器
    TIM_ARRPreloadConfig(TIM1, ENABLE);
    // 使能定时器（定时器开始计数）
    TIM_Cmd(TIM1, ENABLE);

    // 使能PWM输出
    TIM_CtrlPWMOutputs(TIM1, ENABLE);
}		/* -----  end of function PWM_TIM3Init  ----- */


void motor_init()
{
	PWM_TIM1Init(1000,84);
	TIM_SetCompare3(TIM1, 0);
	TIM_SetCompare4(TIM1, 0);
}

void motor_forward_rotate(u16 pwm)
{
	TIM_SetCompare3(TIM1, pwm);
	TIM_SetCompare4(TIM1, 0);
}

void motor_backward_rotate(u16 pwm)
{
	TIM_SetCompare3(TIM1, 0);
	TIM_SetCompare4(TIM1, pwm);
}


// 电磁阀测试
void valve_init()
{
	GPIO_InitTypeDef GPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE); //使能GPIOA的时钟
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 ;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//输出
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;  //推挽输出
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;  //上拉输出
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz; //高速GPIO
	GPIO_Init(GPIOE, &GPIO_InitStructure);
	
	GPIO_ResetBits(GPIOE, GPIO_Pin_4 | GPIO_Pin_5 ); // 初始化设置为高电平（灯灭）
}

// 舵机测试
static void PWM_TIM4Init ( uint32_t arr, uint32_t psc )
{
    GPIO_InitTypeDef GPIO_InitStructure = {0};
    
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure = {0};
    TIM_OCInitTypeDef TIM_OCInitStructure = {0};

    // PWM引脚使用配置
    // TIM4C3 --> PB8
    // TIM4C4 --> PC9
    // 使能GPIOB的时钟
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

    
    
		GPIO_InitStructure.GPIO_Pin = ( GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15 ); 
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;        // 使用复用功能输出模式
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;  // 100MHz高速引脚
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;      // 使用推挽输出
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;    // 不使用上下拉电阻
    GPIO_Init(GPIOD, &GPIO_InitStructure);

		// 设置为复用功能（指定具体的复用功能）
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);    
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
		
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);


    // 设定时基
    TIM_TimeBaseStructure.TIM_Prescaler = psc - 1;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    TIM_TimeBaseStructure.TIM_Period = arr - 1;
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);


    // 设定输出通道（我们使用的是TIM4的C1通道）
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
		//TIM_OCInitStructure.TIM_Pulse = 1000; //这个设置的貌似是初始时候的位置
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OC1Init(TIM4, &TIM_OCInitStructure);
		TIM_OC2Init(TIM4, &TIM_OCInitStructure);
		TIM_OC3Init(TIM4, &TIM_OCInitStructure);
		TIM_OC4Init(TIM4, &TIM_OCInitStructure);

    // 使能输出通道一的重载寄存器
    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
		TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
		TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
		TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
		
    // 使能TIM4的ARR重载
    TIM_ARRPreloadConfig(TIM4, ENABLE);
    // 使能TIM4，即使得定时器开始工作
    TIM_Cmd(TIM4, ENABLE);

    // 使能TIM4的PWM输出，只有这样才能真正的输出PWM波形
    TIM_CtrlPWMOutputs(TIM4, ENABLE);
}		/* -----  end of function PWM_TIM4Init  ----- */


void pwm_set_compare( uint16_t compare_value, uint8_t channel )
{
	switch(channel)
	{
		case 1:
			TIM_SetCompare1(TIM4, compare_value);
			break;
		case 2:
			TIM_SetCompare2(TIM4, compare_value);
			break;
		case 3:
			TIM_SetCompare3(TIM4, compare_value);
			break;
		case 4:
			TIM_SetCompare4(TIM4, compare_value);
			break;
		default:
			break;
	}
}


void pwm_init ( void )
{
  PWM_TIM4Init(20000, 84);
	pwm_set_compare(1500,1);
	pwm_set_compare(1500,2);
	pwm_set_compare(1500,3);
	pwm_set_compare(1500,4);
}








//

int main(void)
{
	u32 t=0;
	u8 ret = 0;
	//uart_init(115200);
	pwm_init();
	valve_init();
	//motor_init();
	//TB6612FNG1_Init();
	//petral_init();
	uart2_init(9600);
	
	
	// MPU9150测试
	float pitch,roll,yaw; 		//欧拉角
	pitch = 1.0;
	roll = 1.0;
	yaw = 1.0;
	short aacx,aacy,aacz;		//加速度传感器原始数据
	short gyrox,gyroy,gyroz;	//陀螺仪原始数据
	short temp;					//温度
	
	
	
	delay_init(84);
	delay_ms(10000);
	//	if(MPU_Init()!=0)
	//	{
	//		//MyPrintf("Init Error\n");
	//		return 0;
	//	}
		//USART_SendData(USART2,0xAA);

	//	ret = mpu_dmp_init();
	//	USART_SendData(USART2,ret); 
	//	
	//	while(mpu_dmp_init())
	//	{
	//		ret = mpu_dmp_init();
	//		//MyPrintf("Error\n");
	//		//USART_SendData(USART2,ret); 
	//		delay_ms(200);
	//	}
		//USART_SendData(USART2,0xAA);
		//MyPrintf("Successed\n");
		//int encoder;
	
  while(1){
////		//encoder = read_encoder();
////    //printf("t:%d\r\n",encoder);
////		// 测试舵机
		pwm_set_compare(1800,1);
		pwm_set_compare(1800,2);
		pwm_set_compare(1800,3);
////		//pwm_set_compare(1800,4);
		delay_ms(1000);
		pwm_set_compare(1500,1);
		pwm_set_compare(1500,2);
		pwm_set_compare(1500,3);
////		//pwm_set_compare(1500,4);
		delay_ms(1000);
		pwm_set_compare(1200,1);
		pwm_set_compare(1200,2);
		pwm_set_compare(1200,3);
////		//pwm_set_compare(1200,4);
		delay_ms(1000);
		pwm_set_compare(1500,1);
		pwm_set_compare(1500,2);
		pwm_set_compare(1500,3);
//		//pwm_set_compare(1500,4);
    delay_ms(1000);
//		// 测试电磁阀
//			GPIO_SetBits(GPIOE, GPIO_Pin_4 | GPIO_Pin_5 );
//			delay_ms(10000);
//			GPIO_ResetBits(GPIOE, GPIO_Pin_4 | GPIO_Pin_5 );
//			delay_ms(10000);
//		// 测试L9110S
//		//motor_forward_rotate(800);
//		//delay_ms(10000);
//		//motor_forward_rotate(0);
//		//delay_ms(10000);
//		// 测试TB6612FNG
//		//GPIO_SetBits(GPIOE, GPIO_Pin_3); 
//		//GPIO_SetBits(GPIOD, GPIO_Pin_0);
//		//TIM_SetCompare2(TIM3    , 1000);
//		// 测试串口3
//		//USART_SendData(USART3,0xAB);
//		//delay_ms(1000);
//		// 测试串口2
//		//USART_SendData(USART2,0xCC);
//		
//		// 测试MPU9150
////		while(mpu_dmp_get_data(&pitch,&roll,&yaw)!=0)
////		{
////			MyPrintf("%f\n",yaw);
////			t++;
////		}
////		MyPrintf("%f\n",yaw);
////		MyPrintf("%d\n",t);
////		t=0;
//		//USART_SendData(USART2,ret); 
//		//ret = mpu_dmp_get_data(&pitch,&roll,&yaw);
////		while(mpu_dmp_get_data(&pitch,&roll,&yaw)!=0)
////		{
////			t++;
////		}
//		

//		//if(ret==0)
//		//{ 
//		//	temp=MPU_Get_Temperature();	//得到温度值
//		//	MPU_Get_Accelerometer(&aacx,&aacy,&aacz);	//得到加速度传感器数据
//		//	MPU_Get_Gyroscope(&gyrox,&gyroy,&gyroz);	//得到陀螺仪数据
//			//MyPrintf("%f\n",temp);
//		//}
//		//delay_ms(10);

//		//USART_SendData(USART2,ret);
//		//USART_SendData(USART2,0xFF);
//		//if(t=100)
//		//{
//		//	MyPrintf("a%f\n",yaw);
//		//	MyPrintf("t%d\n",t);
//		//	t=0;
//		//}
//		//t++;
	}
}



//int main(void)
//{
//	rw_encoder_init();
//	rw_motor_init();
//	uart2_init(9600);
//	delay_init(84);
//	delay_ms(1000);
//	
//	int encoder;
//	int target = 200;
//	int u = 0;
//	float p = 0.1f;
//	float i = 0.01f;
//	float d = 0.0f;
//	float err = 0.0f;
//	float sumerr = 0.0f;
//	
//	while(1)
//	{
//		//USART_SendData(USART2,0xFF);
//		encoder = rw_read_encoder();
//		err = target - encoder;
//		sumerr = sumerr + err;
//		if(err>10||err<-10)
//			u = (int)(p*err + i*sumerr);
//		
//		//USART_SendData(USART2,encoder);
//		MyPrintf("t%d\n",encoder);
//		MyPrintf("u%d\n",u);
//		rw_motor_speed(u);
//		delay_ms(100);
//	}
//	
//}
//
